{
	"info": {
		"_postman_id": "ba14593f-8d1b-4746-8fa2-ef2b98e0f14b",
		"name": "test task JSONPlaceholder",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "35969992"
	},
	"item": [
		{
			"name": "get a list of posts",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"  pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type is application/json\", () => {\r",
							"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 300ms\", () => {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(300);\r",
							"});\r",
							"\r",
							"var response = pm.response.json(); \r",
							"\r",
							"pm.test(\"Response body is an array\", () => {\r",
							"  pm.expect(response).to.be.an(\"array\");\r",
							"});\r",
							"\r",
							"pm.test(\"Each post in the array has correct structure and types\", () => {\r",
							"  response.forEach(post => {\r",
							"    pm.expect(post, \"Each post should be an object\").to.be.an(\"object\");\r",
							"    pm.expect(post, \"Post should have userId, id, title, body properties\").to.have.all.keys(\"userId\", \"id\", \"title\", \"body\");\r",
							"    pm.expect(post.userId, \"userId should be a number\").to.be.a(\"number\");\r",
							"    pm.expect(post.id, \"id should be a number\").to.be.a(\"number\");\r",
							"    pm.expect(post.title, \"title should be a string\").to.be.a(\"string\");\r",
							"    pm.expect(post.body, \"body should be a string\").to.be.a(\"string\");\r",
							"  });\r",
							"});\r",
							"\r",
							"pm.test(\"Check status code 404 for not existing endpoint\", function () {\r",
							"    pm.sendRequest(\"https://jsonplaceholder.typicode.com/postssssss\", function (err, response) {\r",
							"        pm.expect(response).to.have.status(404);\r",
							"    });\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://jsonplaceholder.typicode.com/posts",
					"protocol": "https",
					"host": [
						"jsonplaceholder",
						"typicode",
						"com"
					],
					"path": [
						"posts"
					]
				}
			},
			"response": []
		},
		{
			"name": "create a post",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Parse the response JSON\r",
							"const response = pm.response.json();\r",
							"\r",
							"// Test for status code\r",
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"// Test for response time\r",
							"pm.test(\"Response time is less than 2000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
							"});\r",
							"\r",
							"// Test for content-type header\r",
							"pm.test(\"Content-Type is application/json\", function () {\r",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"// Test for response body properties\r",
							"pm.test(\"Response body has required properties\", function () {\r",
							"    pm.expect(response).to.have.property('title');\r",
							"    pm.expect(response).to.have.property('body');\r",
							"    pm.expect(response).to.have.property('userId');\r",
							"    pm.expect(response).to.have.property('id');\r",
							"});\r",
							"\r",
							"// Test for property types\r",
							"pm.test(\"Property types are correct\", function () {\r",
							"    pm.expect(response.title).to.be.a('string');\r",
							"    pm.expect(response.body).to.be.a('string');\r",
							"    pm.expect(response.userId).to.be.a('number');\r",
							"    pm.expect(response.id).to.be.a('number');\r",
							"});\r",
							"pm.test(\"Check status code 404 for not existing endpoint\", function () {\r",
							"    pm.sendRequest(\"https://jsonplaceholder.typicode.com/postss\", function (err, response) {\r",
							"        pm.expect(response).to.have.status(404);\r",
							"    });\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"title\": \"foo\",\r\n    \"body\": \"bar\",\r\n    \"userId\": 1\r\n  }",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://jsonplaceholder.typicode.com/posts",
					"protocol": "https",
					"host": [
						"jsonplaceholder",
						"typicode",
						"com"
					],
					"path": [
						"posts"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete a post",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 600ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(600);\r",
							"});\r",
							"\r",
							"pm.test(\"Response headers contain content-type\", function () {\r",
							"    pm.expect(pm.response.headers.get('content-type')).to.exist;\r",
							"});\r",
							"\r",
							"pm.test(\"Status code is not 404 (Not Found)\", function () {\r",
							"    pm.response.to.not.have.status(404);\r",
							"});\r",
							"\r",
							"pm.test(\"Response body is empty\", function() {\r",
							"    const responseBody = pm.response.json();\r",
							"    pm.expect(responseBody).to.be.an('object').that.is.empty;\r",
							"});\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "https://jsonplaceholder.typicode.com/posts/1",
					"protocol": "https",
					"host": [
						"jsonplaceholder",
						"typicode",
						"com"
					],
					"path": [
						"posts",
						"1"
					]
				}
			},
			"response": []
		}
	]
}